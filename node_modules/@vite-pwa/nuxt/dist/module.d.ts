import * as _nuxt_schema from '@nuxt/schema';
import { HookResult } from '@nuxt/schema';
import { VitePWAOptions } from 'vite-plugin-pwa';

interface ClientOptions {
    /**
     * Exposes the plugin: defaults to true.
     */
    registerPlugin?: boolean;
    /**
     * Registers a periodic sync for updates interval: value in seconds.
     */
    periodicSyncForUpdates?: number;
    /**
     * Will prevent showing native PWA install prompt: defaults to false.
     *
     * When set to true or no empty string, the native PWA install prompt will be prevented.
     *
     * When set to a string, it will be used as the key in `localStorage` to prevent show the PWA install prompt widget.
     *
     * When set to true, the key used will be `vite-pwa:hide-install`.
     */
    installPrompt?: boolean | string;
}
interface PwaModuleOptions extends Partial<VitePWAOptions> {
    registerWebManifestInRouteRules?: boolean;
    /**
     * Writes the plugin to disk: defaults to false (debug).
     */
    writePlugin?: boolean;
    /**
     * Options for plugin.
     */
    client?: ClientOptions;
}

interface ModuleOptions extends PwaModuleOptions {
}
interface ModuleRuntimeHooks {
    /**
     * Emitted when the service worker is registered
     * @param data The url and the optional service worker registration object
     */
    'service-worker:registered': (data: {
        url: string;
        registration?: ServiceWorkerRegistration;
    }) => HookResult;
    /**
     * Emitted when the service worker registration fails
     * @param data The optional error object
     */
    'service-worker:registration-failed': (data: {
        error?: unknown;
    }) => HookResult;
    /**
     * Emitted when the service worker is activated
     * @param data The url and the service worker registration object
     */
    'service-worker:activated': (data: {
        url: string;
        registration: ServiceWorkerRegistration;
    }) => HookResult;
}
declare const _default: _nuxt_schema.NuxtModule<ModuleOptions>;

export { type ClientOptions, type ModuleOptions, type ModuleRuntimeHooks, type PwaModuleOptions, _default as default };
